import cv2
import numpy as np
import mediapipe as mp
import time
import sys

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=2, min_detection_confidence=0.5, min_tracking_confidence=0.5)
mp_draw = mp.solutions.drawing_utils

# Initialize OpenCV Face Detection (Haar Cascade)
haar_path = "/home/brkj/opencv/data/haarcascades/haarcascade_frontalface_default.xml"
face_cascade = cv2.CascadeClassifier(haar_path)
if face_cascade.empty():
    print(f"Error: Could not load Haar cascade file at {haar_path}")
    sys.exit(1)

# Initialize Motion Detection (MOG2)
fgbg = cv2.createBackgroundSubtractorMOG2(history=500, varThreshold=100, detectShadows=False)

# Open USB Webcam
cap = cv2.VideoCapture(0)  # /dev/video0
if not cap.isOpened():
    print("Error: Could not open webcam (/dev/video0).")
    sys.exit(1)

# Set resolution (test 1280x720 for far-distance detection, fallback to 640x480 if FPS is low)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

# CUDA Acceleration (with fallback to CPU)
def to_gpu(frame):
    try:
        gpu_frame = cv2.cuda_GpuMat()
        gpu_frame.upload(frame)
        return gpu_frame
    except cv2.error as e:
        print(f"CUDA Error: {e}. Falling back to CPU.")
        return frame

# Motion detection threshold
motion_threshold = 10000  # Increased to reduce noise

# FPS calculation
prev_time = time.time()
frame_count = 0
fps = 0.0  # Initialize fps

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture frame.")
        break

    # Pre-process frame (sharpen for distant hand detection)
    frame = cv2.convertScaleAbs(frame, alpha=1.2, beta=10)  # Increase contrast

    # Convert to RGB for MediaPipe
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Face Detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=8, minSize=(50, 50))
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
        cv2.putText(frame, "Face", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)

    # Hand Detection
    results = hands.process(frame_rgb)
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            x_min, y_min = frame.shape[1], frame.shape[0]
            x_max, y_max = 0, 0
            for lm in hand_landmarks.landmark:
                x, y = int(lm.x * frame.shape[1]), int(lm.y * frame.shape[0])
                x_min, y_min = min(x_min, x), min(y_min, y)
                x_max, y_max = max(x_max, x), max(y_max, y)
            cv2.rectangle(frame, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)
            cv2.putText(frame, "Hand", (x_min, y_min - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    # Motion Detection
    fgmask = fgbg.apply(frame)
    contours, _ = cv2.findContours(fgmask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    motion_detected = False
    for contour in contours:
        if cv2.contourArea(contour) > motion_threshold:
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)
            cv2.putText(frame, "Motion", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)
            motion_detected = True

    # CUDA Processing (disabled until CUDA is fixed)
    # gpu_frame = to_gpu(frame)
    # if isinstance(gpu_frame, cv2.cuda_GpuMat):
    #     gpu_frame = cv2.cuda.bilateralFilter(gpu_frame, d=5, sigmaColor=50, sigmaSpace=50)
    #     frame = gpu_frame.download()

    # Calculate FPS
    frame_count += 1
    curr_time = time.time()
    if curr_time - prev_time >= 1.0:
        fps = frame_count / (curr_time - prev_time)
        frame_count = 0
        prev_time = curr_time

    # Display FPS
    cv2.putText(frame, f"FPS: {fps:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)

    # Display frame
    cv2.imshow("Video Detection", frame)

    # Exit on 'q'
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Cleanup
cap.release()
cv2.destroyAllWindows()
hands.close()
